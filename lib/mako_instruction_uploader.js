/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2019, Joyent, Inc.
 */

/*
 * Receives transformed instructions from a transformer and uploads
 * them to Manta in a location that is known by Mako gc scripts.
 */
var mod_assertplus = require('assert-plus');
var mod_events = require('events');
var mod_fsm = require('mooremachine');
var mod_path = require('path');
var mod_util = require('util');
var mod_uuidv4 = require('uuid/v4');

var MemoryStream = require('stream').PassThrough;

function
MakoInstructionUploader(opts)
{
	var self = this;

	mod_assertplus.object(opts, 'opts');
	mod_assertplus.object(opts.log, 'opts.log');
	mod_assertplus.object(opts.ctx, 'opts.ctx');
	mod_assertplus.object(opts.listener, 'opts.listener');

	self.mu_ctx = opts.ctx;
	self.mu_log = opts.log.child({
		component: 'MakoInstructionUploader'
	});
	self.mu_listener = opts.listener;

	mod_fsm.FSM.call(self, 'running');
}
mod_util.inherits(MakoInstructionUploader, mod_fsm.FSM);


MakoInstructionUploader.prototype._get_tunables_ref = function
_get_tunables_ref()
{
	return (this.mu_ctx.ctx_cfg.tunables);
};


MakoInstructionUploader.prototype._get_instr_path_prefix = function
_get_instr_path_prefix()
{
	return (this._get_tunables_ref().instr_upload_path_prefix);
};


MakoInstructionUploader.prototype._get_instance = function
_get_instance()
{
	return (this.mu_ctx.ctx_cfg.instance);
};


MakoInstructionUploader.prototype._get_manta_client = function
_get_manta_client()
{
	return (this.mu_ctx.ctx_manta_client);
};


MakoInstructionUploader.prototype._get_collector = function
_get_collector()
{
	return (this.mu_ctx.ctx_metrics_manager.collector);
};


MakoInstructionUploader.prototype._get_manta_instruction_path = function
_get_manta_instruction_path(storage_id)
{
	var self = this;
	/*
	 * We maintain naming compatibility with the offline GC process here.
	 * Formerly, Mako instructions were uploaded as objects to the following
	 * path in manta.
	 *
	 * /poseidon/stor/manta_gc/mako/<manta-storage-id>/
	 * 	$NOW-$MARLIN_JOB-X-$UUID-mako-$MANTA_STORAGE_ID
	 *
	 * Where NOW=$(date +%Y-%m-%d-%H-%M-%S), $MARLIN-JOB was the jobId of
	 * the marlin job that processed the database dumps leading to the
	 * creation of those instructions, and UUID was a UUID generated by that
	 * jobs reducer.
	 *
	 * The mako_gc.sh script that processes these instructions does not rely
	 * on the $MARLIN_JOB or $UUID variables, so we are free to embed them
	 * with our own semantics. The closest analogy to the MARLIN_JOB is the
	 * zonename we're executing in. We generate a UUID for each new batch of
	 * instruction we generate.
	 */
	var date = new Date().toISOString().replace(/T|:/, '-').split('.')[0];
	var uuid = mod_uuidv4();
	var instance = self._get_instance();

	var instr_obj = [date, instance, 'X', uuid, 'mako',
		storage_id].join('-');

	return mod_path.join(self._get_instr_path_prefix(), storage_id,
		instr_obj);
};


MakoInstructionUploader.prototype._format_object_lines = function
_format_object_lines(storage_id, lines)
{
	return (lines.map(function (line) {
		return (['mako', storage_id].concat(line)).join('\t');
	}).join('\n')).concat('\n');
};


MakoInstructionUploader.prototype._listen_for_instructions = function
_listen_for_instructions()
{
	var self = this;

	self.on('instruction', function (instruction) {
		var storage_id = instruction.storage_id;

		var keys = [];
		var lines = [];

		instruction.lines.forEach(function (elem) {
			keys.push(elem.key);
			lines.push(elem.line);
		});

		self.mu_log.debug({
			manta_storage_id: storage_id,
			count: lines.length
		}, 'Received instructions to upload.');

		var path = self._get_manta_instruction_path(storage_id);
		var data = self._format_object_lines(storage_id, lines);

		var client = self._get_manta_client();
		var stream = new MemoryStream();

		/*
		 * We make the storage directory if it doesn't already exist.
		 */
		var opts = {
			copies: 2,
			type: 'text/plain',
			mkdirs: true
		};

		client.put(path, stream, opts, function (err) {
			if (err) {
				self.mu_log.error({
					path: path,
					err: err.message,
					numlines: lines.length
				}, 'Error encountered while uploading Mako ' +
				'GC instructions to Manta.');
				return;
			}

			self.mu_log.debug({
				path: path,
				keys: keys,
				storage_id: storage_id
			}, 'Uploaded Mako GC instruction object to Manta.');

			if (self.mu_ctx.ctx_metrics_manager) {
				self._get_collector().getCollector(
					'gc_mako_instrs_uploaded').observe(
					lines.length, {
					manta_storage_id: storage_id
				});
			}

			var clean = [];

			instruction.lines.forEach(function (line) {
				if (!line.cleaned_state.cleaned) {
					clean.push({
						key: line.key,
						storage: line.size,
						sharks: line.sharks
					});
					line.cleaned_state.cleaned = true;
				}
			});

			self.mu_listener.emit('cleanup', clean);
		});

		stream.end(data);

		self.mu_log.debug({
			path: path,
			key: keys
		}, 'Finished writing instruction data.');
	});
};


MakoInstructionUploader.prototype._stop_listening_for_instructions = function
_stop_listening_for_instructions()
{
	var self = this;

	self.removeAllListeners('instruction');
};


MakoInstructionUploader.prototype.state_running = function
state_running(S)
{
	var self = this;

	self._listen_for_instructions();

	S.on(self, 'assertPause', function () {
		self.mu_log.debug('Pausing mako instruction uploader');
		S.gotoState('paused');
	});

	S.on(self, 'assertResume', function () {
		self.emit('running');
	});

	S.on(self, 'assertShutdown', function () {
		self._stop_listening_for_instructions();
		S.gotoState('shutdown');
	});

	self.emit('running');
};


MakoInstructionUploader.prototype.state_paused = function
state_paused(S)
{
	var self = this;

	self._stop_listening_for_instructions();

	S.on(self, 'assertResume', function () {
		S.gotoState('running');
	});

	S.on(self, 'assertPause', function () {
		self.emit('paused');
	});

	S.on(self, 'assertShutdown', function () {
		S.gotoState('shutdown');
	});

	self.emit('paused');
};


MakoInstructionUploader.prototype.state_shutdown = function
state_shutdown(S)
{
	var self = this;
	self.emit('shutdown');

	S.on(self, 'assertShutdown', function () {
		self.mu_log.debug('Received shutdown event ' +
			'multiple times!');
	});
};


MakoInstructionUploader.prototype.describe = function
describe()
{
	var self = this;

	var descr = {
		component: 'instruction uploader',
		state: self.getState()
	};

	return (descr);
};


module.exports = {

	MakoInstructionUploader: MakoInstructionUploader

};
