/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2018, Joyent, Inc.
 */

/*
 * Receives transformed instructions from a transformer and uploads
 * them to Manta in a location that is known by Mako gc scripts.
 */
var mod_assertplus = require('assert-plus');
var mod_fsm = require('mooremachine');
var mod_path = require('path');
var mod_util = require('util');

function
MakoInstructionUploader(opts)
{
	var self = this;

	mod_assertplus.object(opts, 'opts');
	mod_assertplus.object(opts.log, 'opts.log');
	mod_assertplus.object(opts.ctx, 'opts.ctx');
	mod_assertplus.object(opts.ctx.ctx_mako_cfg, 'opts.ctx_mako_cfg');
	mod_assertplus.object(opts.listener, 'opts.listener');

	self.mu_ctx = opts.ctx;
	self.mu_log = opts.log.child({
		component: 'MakoInstructionUploader'
	});
	self.mu_listener = opts.listener;

	mod_fsm.FSM.call(self, 'running');
}
mod_util.inherits(MakoInstructionUploader, mod_fsm.FSM);


MakoInstructionUploader.prototype._get_manta_instruction_path = function
_get_manta_instruction_path(storage_id)
{
	/*
	 * We maintain naming compatibility with the offline GC process here.
	 * Formerly, Mako instructions were uploaded as objects to the following
	 * path in manta.
	 *
	 * /poseidon/stor/manta_gc/mako/<manta-storage-id>/
	 * 	$NOW-$MARLIN_JOB-X-$UUID-mako-$MANTA_STORAGE_ID
	 *
	 * Where NOW=$(date +%Y-%m-%d-%H-%M-%S), $MARLIN-JOB was the jobId of
	 * the marlin job that processed the database dumps leading to the
	 * creation of those instructions, and UUID was a UUID generated by that
	 * jobs reducer.
	 *
	 * The mako_gc.sh script that processes these instructions does not rely
	 * on the $MARLIN_JOB or $UUID variables, so we are free to embed them
	 * with our own semantics. The closest analogy to the MARLIN_JOB is the
	 * zonename we're executing in. We generate a UUID for each new batch of
	 * instruction we generate.
	 */
	var date = new Date().toISOString().replace(/T|:/, '-').split('.')[0];
	var uuid = mod_uuidv4();
	var zone_id = self.mu_ctx.ctx_cfg.zoneId;

	var instr_obj = [date, zone_id, 'X', uuid, 'mako', storage_id].join('-');

	return mod_path.join(self.mu_ctx.ctx_mako_cfg.instr_path_prefix,
		instr_obj);
};


MakoInstructionUploader.prototype.state_running = function
state_running(S)
{
	var self = this;

	/*
	 * MakoInstructionUploader receives 'instruction' events with two
	 * arguments.
	 *
	 * storage_id - i.e. 1.stor.orbit.example.com
	 * lines - an array of strings of the following form:
	 * 	"<creator-id>\t<object-id>"
	 */
	self.on('instruction', function (storage_id, lines) {
	});
};


module.exports = {

	MakoInstructionUploader: MakoInstructionUploader

};
